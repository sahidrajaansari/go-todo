// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/persistence/todo_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	todo_aggregate "todo-level-5/pkg/domain/todo_aggregate"

	gomock "github.com/golang/mock/gomock"
)

// MockITodoRepo is a mock of ITodoRepo interface.
type MockITodoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepoMockRecorder
}

// MockITodoRepoMockRecorder is the mock recorder for MockITodoRepo.
type MockITodoRepoMockRecorder struct {
	mock *MockITodoRepo
}

// NewMockITodoRepo creates a new mock instance.
func NewMockITodoRepo(ctrl *gomock.Controller) *MockITodoRepo {
	mock := &MockITodoRepo{ctrl: ctrl}
	mock.recorder = &MockITodoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepo) EXPECT() *MockITodoRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoRepo) Create(ctx context.Context, todoAgg *todo_aggregate.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, todoAgg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITodoRepoMockRecorder) Create(ctx, todoAgg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoRepo)(nil).Create), ctx, todoAgg)
}

// DeleteTodo mocks base method.
func (m *MockITodoRepo) DeleteTodo(ctx context.Context, todoID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", ctx, todoID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockITodoRepoMockRecorder) DeleteTodo(ctx, todoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockITodoRepo)(nil).DeleteTodo), ctx, todoID)
}

// GetTodoByID mocks base method.
func (m *MockITodoRepo) GetTodoByID(ctx context.Context, todoID string) (*todo_aggregate.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoByID", ctx, todoID)
	ret0, _ := ret[0].(*todo_aggregate.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *MockITodoRepoMockRecorder) GetTodoByID(ctx, todoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*MockITodoRepo)(nil).GetTodoByID), ctx, todoID)
}

// GetTodos mocks base method.
func (m *MockITodoRepo) GetTodos(ctx context.Context, query string) ([]*todo_aggregate.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos", ctx, query)
	ret0, _ := ret[0].([]*todo_aggregate.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockITodoRepoMockRecorder) GetTodos(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockITodoRepo)(nil).GetTodos), ctx, query)
}

// UpdateTodo mocks base method.
func (m *MockITodoRepo) UpdateTodo(ctx context.Context, todoID string, updatedTodoAgg *todo_aggregate.Todo) (*todo_aggregate.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", ctx, todoID, updatedTodoAgg)
	ret0, _ := ret[0].(*todo_aggregate.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockITodoRepoMockRecorder) UpdateTodo(ctx, todoID, updatedTodoAgg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockITodoRepo)(nil).UpdateTodo), ctx, todoID, updatedTodoAgg)
}
